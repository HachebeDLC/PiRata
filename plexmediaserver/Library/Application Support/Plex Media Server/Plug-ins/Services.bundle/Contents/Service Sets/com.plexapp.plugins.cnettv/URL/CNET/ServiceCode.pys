NAMESPACES = {'smil': 'http://www.w3.org/2005/SMIL21/Language'}

####################################################################################################
def NormalizeURL(url):

	return url.split('#')[0].split('?')[0]

####################################################################################################
def MetadataObjectForURL(url):

	html = HTML.ElementFromURL(url)

	title = html.xpath('//meta[@itemprop="name"]/@content')[0]
	summary = html.xpath('//meta[@itemprop="description"]/@content')[0]

	try:
		originally_available_at = html.xpath('//meta[@itemprop="uploadDate"]/@content')[0].split('UTC')[0]
		originally_available_at = Datetime.ParseDate(originally_available_at).date()
	except:
		originally_available_at = None

	thumb = html.xpath('//meta[@itemprop="thumbnailUrl"]/@content')[0]

	duration = html.xpath('//meta[@itemprop="duration"]/@content')[0]

	if ':' in duration:
		duration = Datetime.MillisecondsFromString(duration.split('+')[0])
	else:
		duration = int(duration) * 1000

	return VideoClipObject(
		title = title,
		summary = summary,
		originally_available_at = originally_available_at,
		duration = duration,
		thumb = Resource.ContentsOfURLWithFallback(url=thumb)
	)

####################################################################################################
def MediaObjectsForURL(url):

	return [
		MediaObject(
			parts = [
				PartObject(key=Callback(PlayVideo, url=url, resolution=resolution))
			],
			container = Container.MP4,
			video_codec = VideoCodec.H264,
			video_resolution = resolution,
			audio_codec = AudioCodec.AAC,
			audio_channels = 2,
			optimized_for_streaming = True
		) for resolution in ['1080', '720', '360']
	]

####################################################################################################
@indirect
def PlayVideo(url, resolution='1080', **kwargs):

	json_obj = GetJSON(url)

	if not 'files' in json_obj or not 'hds' in json_obj['files'] or json_obj['files']['hds'] is None:
		raise Ex.MediaNotAvailable

	video_id = json_obj['files']['hds']
	smil_url = 'https://link.theplatform.com/s/kYEXFC/%s?format=SMIL&mbr=true&switch=secure' % (video_id)

	xml = XML.ElementFromURL(smil_url)

	video_1080 = xml.xpath('//smil:video[@height="1080"]', namespaces=NAMESPACES)
	video_720 = xml.xpath('//smil:video[@height="720"]', namespaces=NAMESPACES)
	video_360 = xml.xpath('//smil:video[@height="360"]', namespaces=NAMESPACES)

	if resolution == '1080' and len(video_1080) > 0:
		video_url = video_1080[0].get('src')
	elif resolution in ['1080', '720'] and len(video_720) > 0:
		video_url = video_720[0].get('src')
	elif resolution in ['1080', '720', '360'] and len(video_360) > 0:
		video_url = video_360[0].get('src')
	else:
		raise Ex.MediaNotAvailable

	return IndirectResponse(VideoClipObject, key=video_url)

####################################################################################################
def GetJSON(url):

	html = HTML.ElementFromURL(url)
	json = html.xpath('//div[@class="videoPlayer"]/@data-cnet-video-options')

	if len(json) < 1:
		raise Ex.MediaNotAvailable

	json_obj = JSON.ObjectFromString(json[0])

	if 'video' in json_obj and json_obj['video'] is not None:
		json_obj = json_obj['video']
	elif 'videos' in json_obj and json_obj['videos'] is not None:
		json_obj = json_obj['videos'][0]
	else:
		raise Ex.MediaNotAvailable

	return json_obj
